public class SLL<T> {
	Node<T> head;
	Node<T> tail;
	int size;

	SLL() {
		this.head = this.tail = null;
		this.size = 0;
	}

	// Internal Node class to represent Nodes
	private static class Node<T> {
		T data;
		Node next;

		Node(T data, Node next) {
			this.data = data;
			this.next = next;
		}

		@Override
		public String toString() {
			return this.data.toString();
		}
	}

	// Empty Linked List, O(n)
	public void clear() {
		Node<T> trav = head;
		while (trav != null) {
			Node<T> next = trav.next;
			trav.next = null;
			trav.data = null;
			trav = next;
		}
		head = tail = null;
		size = 0;
	}

	// Returns size of LL, O(1)
	public int size() {
		return this.size;
	}

	// Returns if LL is empty, O(1)
	public boolean isEmpty() {
		return this.size == 0;
	}

	// Add an element to the tail of LL, O(1)
	public void add(T elem) {
		addLast(elem);
	}

	// Add a node to the tail of LL, O(1)
	public void addLast(T elem) {
		if (isEmpty()) {
			head = tail = new Node<T>(elem, null);
		} else {
			tail.next = new Node<T>(elem, null);
			tail = tail.next;
		}
		size++;
	}

	// Add a node to the beginning of LL, O(1)
	public void addFirst(T elem) {
		if (isEmpty()) {
			head = tail = new Node<T>(elem, null);
		} else {
			Node temp = head.next;
			head.next = new Node<T>(elem, temp);
		}
		size++;
	}

	// Remove the last node from LL, O(n)
	public T removeLast() {
		if (isEmpty())
			throw new RuntimeException("Linked List is empty");

		T data = tail.data;
		tail = head;
		--size;
		if (isEmpty()) {
			head = null;
		} else {
			for (int i = 1; i < size; i++) {
				tail = tail.next;
			}
			tail.next = null;
		}
		return data;
	}

	// Remove the first node from LL, O(1)
	public T removeFirst() {
		if (isEmpty())
			throw new RuntimeException("Linked List is empty");
		T data = head.data;
		head.data = null;
		--size;
		if (isEmpty())
			head = tail = null;
		else
			head = head.next;
		return data;
	}

	// Remove an arbitary node from LL, O(n)
	public T remove(Node<T> node) {
		if (node.next == null)
			return removeLast();

		T data = node.data;
		System.out.println("Head: " + head == node);
		return data;
	}

	// Check the value of first node if it exists, O(1)
// Check the value of the first node if it exists, O(1)
	public T peekFirst() {
		if (isEmpty())
			throw new RuntimeException("Empty List");
		return head.data;
	}

	// Check the value of the last node if it exists, O(1)
	// Check the value of last node if it exists, O(1)
	public T peekLast() {
		if (isEmpty())
			throw new RuntimeException("Empty list");
		return tail.data;
	}
}