import java.util.*;

public class BinaryHeap<T extends Comparable<T>> {

	// A dynamic list to track the elements inside the heap
	private List<T> heap = null;

	// This map keeps track of all indexes of a particular node
	private Map<T, TreeSet<Integer>> map;

	BinaryHeap() {
		heap = new ArrayList<>();
		map = new HashMap<>();
	}

	// Check if heap is empty
	public boolean isEmpty() {
		return heap.size() == 0;
	}

	// Clear the PQ and the map
	public void clear() {
		heap.clear();
		map.clear();
	}

	// Returns the size of the PQ
	public int size() {
		return heap.size();
	}

	// Returns the value of the lowest priority element in queue
	public T peek() {
		if (isEmpty())
			return null;
		return heap.get(0);
	}

	// Test if an element is there in the PQ, O(1)
	public boolean contains(T elem) {
		if (elem == null)
			return false;
		return map.containsKey(elem);

//		Linear Search, takes O(n) time but it can be done in O(1) with a Hashtable
//		for(int i=0;i<heap.size();i++) {
//			if(heap.get(i) == elem) {
//				return true;
//			}
//			return false;
//		}
	}

	// Checks if a node at i is less than a node at j
	private boolean less(int i, int j) {
		T node1 = heap.get(i);
		T node2 = heap.get(j);
		return node1.compareTo(node2) <= 0;
	}

	// Swap the two elements at the given indexes in PQ and map
	private void swap(int i, int j) {
		T i_elem = heap.get(i);
		T j_elem = heap.get(j);
		heap.set(i, i_elem);
		heap.set(j, j_elem);
		mapSwap(i_elem, j_elem, i, j);

	}

	// Swap the index of two nodes in the map
	private void mapSwap(T val1, T val2, int val1Index, int val2Index) {
		Set<Integer> set1 = map.get(val1);
		Set<Integer> set2 = map.get(val2);

		set1.remove(val1Index);
		set2.remove(val2Index);

		set1.add(val2Index);
		set2.add(val1Index);
	}

	// Add node(key) and index(value) in the map
	private void mapAdd(T elem, int index) {
		if (map.containsKey(elem)) {
			Set<Integer> set = map.get(elem);
			set.add(index);
		} else {
			TreeSet<Integer> set = new TreeSet<>();
			set.add(index);
			map.put(elem, set);
		}
	}

	// Remove the index at a given value, O(log(n))
	private void mapRemove(T elem, int index) {
		TreeSet<Integer> set = map.get(elem);
		set.remove(index);
		if (set.size() == 0)
			map.remove(elem);
	}

	// Removes the root of the PQ, O(log(n))
	public T poll() {
		return removeAt(0);
	}

	// Removes a node at a particular index
	public T removeAt(int index) {
		if (isEmpty())
			return null;

		T node = heap.get(index);
		heap.remove(index);
		swap(index, heap.size());
		mapRemove(node, index);

		if (index == heap.size())
			return node;

		T elem = heap.get(index);

		bubbleDown(index);
		if (heap.get(index).equals(elem))
			bubbleUp(index);
		return node;
	}

	// Compares the node with child and swaps with the lowest child until Heap
	// Invariant is achieved, O(log(n))
	private void bubbleDown(int k) {
		while (true) {
			int left = (2 * k + 1);
			int right = (2 * k + 2);
			int smallest = left;
			if (right < heap.size() && less(right, left)) {
				smallest = right;
			}
			
			if (left >= heap.size() || less(k, smallest))
				break;

		}
	}

	// Compares the node with the parent node to achieve Heap Invariant, O(log(n))
	private void bubbleUp(int k) {

		// Index of parent node w.r.t k
		int parent = (k - 1) / 2;

		while (k > 0 && less(k, parent)) {
			swap(parent, k);
			k = parent;
			parent = (k - 1) / 2;
		}
	}

	// Adds an element to the PQ, O(log(n))
	public void add(T elem) {
		if (elem == null)
			throw new IllegalArgumentException();
		heap.add(elem);
		int indexOfAddedElem = size() - 1;
		mapAdd(elem, indexOfAddedElem);
		bubbleUp(indexOfAddedElem);
	}

}
