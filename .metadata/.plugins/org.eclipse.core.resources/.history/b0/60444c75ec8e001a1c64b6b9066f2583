import java.util.*;

public class BinaryHeap<T extends Comparable<T>> {

	// A dynamic list to track the elements inside the heap
	private List<T> heap = null;

	// This map keeps track of all indexes of a particular node
	private Map<T, TreeSet<Integer>> map;

	BinaryHeap() {
		heap = new ArrayList<>();
		map = new HashMap<>();
	}

	// Check if heap is empty
	public boolean isEmpty() {
		return heapSize == 0;
	}

	// Clear the PQ and the map
	public void clear() {
		heap.clear();
		map.clear();
	}

	// Returns the size of the PQ
	public int size() {
		return heapSize;
	}

	// Returns the value of the lowest priority element in queue
	public T peek() {
		if (isEmpty())
			return null;
		return heap.get(0);
	}

	// Test if an element is there in the PQ, O(1)
	public boolean contains(T elem) {
		if (elem == null)
			return false;
		return map.containsKey(elem);

//		Linear Search, takes O(n) time but it can be done in O(1) with a Hashtable
//		for(int i=0;i<heapSize;i++) {
//			if(heap.get(i) == elem) {
//				return true;
//			}
//			return false;
//		}
	}

	// Checks if a node at i is less than a node at j
	private boolean less(int i, int j) {
		T node1 = heap.get(i);
		T node2 = heap.get(j);
		return node1.compareTo(node2) <= 0;
	}

	// Removes the root of the PQ, O(log(n))
	public T poll() {
		return removeAt(0);
	}

	// Removes a node at a particular index
	public T removeAt(int index) {

	}

	// Adds an element to the PQ, O(log(n))
	public void add(T elem) {
		if (elem == null)
			throw new IllegalArgumentException();
		heap.add(elem);
		mapAdd(elem, heapSize);
		bubbleUp(heapSize);
		heapSize++;
	}

	// Compares the node with the parent node to achieve Heap Invariant, O(log(n))
	private void bubbleUp(int k) {

	}

}
