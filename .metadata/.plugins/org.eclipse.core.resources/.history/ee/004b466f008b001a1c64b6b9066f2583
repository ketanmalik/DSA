public class SLL<T> {
	Node head;
	Node tail;
	int size;

	SLL() {
		this.head = this.tail = null;
		this.size = 0;
	}

	// Internal Node class to represent Nodes
	private static class Node<T> {
		T data;
		Node next;

		Node(T data, Node next) {
			this.data = data;
			this.next = next;
		}

		@Override
		public String toString() {
			return this.data.toString();
		}
	}

	// Empty Linked List, O(n)
	public void clear() {
		Node<T> trav = head;
		while (trav != null) {
			Node<T> next = trav.next;
			trav.next = null;
			trav.data = null;
			trav = next;
		}
		head = tail = null;
		size = 0;
	}

	// Returns size of LL, O(1)
	public int size() {
		return this.size;
	}

	// Returns if LL is empty, O(1)
	public boolean isEmpty() {
		return this.size == 0;
	}

	// Add an element to the tail of LL, O(n)
	public void add(T elem) {
		addLast(elem);
	}

	// Add a node to the tail of LL, O(n)
	public void addLast(T elem) {
		if (isEmpty()) {
			head = tail = new Node(elem, null);
		} else {
			tail.next = new Node(elem, null);
			tail = tail.next;
		}
		size++;
	}

	// Add a node to the beginning of LL, O(n)
	public void addFirst(T elem) {
		if (isEmpty()) {
			head = tail = new Node(elem, null);
		} else {
			Node temp = head.next;
			head.next = new Node(elem, temp);
		}
	}
}